#!groovy

pipeline {
    agent any

    parameters {
        choice(name: 'environment', choices: ['test', 'prod'], description: 'The environment to deploy to')
        string(name: 'version', defaultValue: 'latest', description: 'The image version to release', trim: true)
    }

    environment {
        MEGA_PROJECT = "57-mega-"
        PROD_PROJECT = "57-services"
        TARGET_PROJECT = "${params.environment.equals('prod') ? env.PROD_PROJECT : (env.MEGA_PROJECT + params.environment)}"
        OCP_ROUTE_SUFFIX = "${env.TARGET_PROJECT}.cloud.itandtel.at"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    echo "\
Project: ${env.TARGET_PROJECT} \n\
Version: ${params.version}\
"
                    sh "oc project ${env.TARGET_PROJECT}"
                }
            }
        }

        stage('Purge') {
            when {
                expression { !params.environment.equals("dev") }
            }
            steps {
                script {
                    dir('apps/mega-zep') {
                        openshift.withCluster() {
                            deleteServiceResources("mega-zep-backend", params.environment)
                            deleteServiceResources("mega-zep-frontend", params.environment)
                        }
                    }
                }
            }
        }

        stage("Release") {
            parallel {
                stage("Fronted") {
                    steps {
                        script {
                            dir('apps/mega-zep') {
                                openshift.withCluster() {
                                    createServiceResources("mega-zep-frontend", params.environment)
                                }
                            }
                        }
                    }
                }

                stage("Backend") {
                    steps {
                        script {
                            dir('apps/mega-zep') {
                                openshift.withCluster() {
                                    def frontendProps = readServiceProperties("mega-zep-frontend", ".", params.environment)
                                    def service = "https://${frontendProps.NAME}-${env.OCP_ROUTE_SUFFIX}"
                                    createServiceResources("mega-zep-backend",
                                            params.environment,
                                            "--param=JAVA_OPTIONS='-Djava.net.preferIPv4Stack=true -Dquarkus.http.cors.origins=${service}'")
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Tag-Image') {
            when {
                expression { !params.environment.equals("dev") }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("57-mega-dev/mega-zep-frontend:${params.version}-${params.environment}", "${env.TARGET_PROJECT}/mega-zep-frontend:latest")
                        openshift.tag("57-mega-dev/mega-zep-backend:${params.version}-${params.environment}", "${env.TARGET_PROJECT}/mega-zep-backend:latest")
                    }
                }
            }
        }

    }
}

def deleteServiceResources(String service, String stage = "") {
    if (stage != "") {
        stage = "." + stage
    }
    sh "oc process --filename ${service}.yaml \
                   --param-file=${service}${stage}.properties \
                   | oc delete --ignore-not-found --filename -"
}

def createServiceResources(String service, String stage = "", String additionalParams = '') {
    if (stage != "") {
        stage = "." + stage
    }
    sh "oc process --filename ${service}.yaml \
                   --param-file=${service}${stage}.properties ${additionalParams} \
                   | oc create --filename -"
}

def readServiceProperties(String service, String path = ".", String stage = "") {
    if (stage != "") {
        stage = "." + stage
    }
    def props = readProperties file: "${path}/${service}${stage}.properties"
    return props
}

