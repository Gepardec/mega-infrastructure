#!groovy

pipeline {
    agent any

    parameters {
        string(name: 'Branch', defaultValue: 'master', description: 'The branch/commit/tag to get the Jenkinsfile from')
        choice(name: 'targetEnvironment', choices: ['dev', 'test', 'prod'], description: 'The environment to deploy to')
        string(name: 'version', defaultValue: 'latest', description: 'The image version to release', trim: true)
        booleanParam(name: 'full', defaultValue: false, description: 'True if all Openshift resource shall eb dropped and recreated')
    }

    environment {
        DOCKER_REGISTRY = 'registry.hub.docker.com/'
        MEGA_PROJECT = "57-mega-"
        TARGET_PROJECT = "${env.MEGA_PROJECT + params.targetEnvironment}"
        OCP_ROUTE_SUFFIX = "${env.TARGET_PROJECT}.cloud.itandtel.at"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    sh "oc project ${env.TARGET_PROJECT}"
                }
            }
        }

        stage('Recreate') {
            when {
                expression { params.full }
            }
            steps {
                script {
                    dir('apps/mega-zep') {
                        openshift.withCluster() {
                            // Frontend
                            deleteServiceResources("mega-zep-frontend", params.targetEnvironment)
                            createServiceResources("mega-zep-frontend",     \
                                                               params.targetEnvironment)
                            // Backend
                            deleteServiceResources("mega-zep-backend", params.targetEnvironment)
                            def frontendProps = readServiceProperties("mega-zep-frontend", ".", params.targetEnvironment)
                            def service = "https://${frontendProps.NAME}-${env.OCP_ROUTE_SUFFIX}"
                            createServiceResources("mega-zep-backend",
                                    params.targetEnvironment,
                                    "--param=JAVA_OPTIONS='-Djava.net.preferIPv4Stack=true -Dquarkus.http.cors.origins=${service}'")
                        }
                    }
                }
            }
        }

        stage('Tag-Image') {
            when {
                expression { !params.full }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        openshift.withCluster() {
                            openshift.tag("${env.DOCKER_REGISTRY}/${USERNAME}/mega-zep-frontend:${params.version}", "${env.TARGET_PROJECT}/mega-zep-frontend:latest")
                            openshift.tag("${env.DOCKER_REGISTRY}/${USERNAME}/mega-zep-backend:${params.version}", "${env.TARGET_PROJECT}/mega-zep-backend:latest")
                        }
                    }
                }
            }
        }
    }
}

def deleteServiceResources(String service, String stage = "") {
    if (stage != "") {
        stage = "." + stage
    }
    sh "oc process --filename ${service}.yaml \
                   --param-file=${service}${stage}.properties \
                   | oc delete --ignore-not-found --filename -"
    sh "oc delete is/${service} --ignore-not-found=true"
}

def createServiceResources(String service, String stage = "", String additionalParams = '') {
    if (stage != "") {
        stage = "." + stage
    }
    sh "oc process --filename ${service}.yaml \
                   --param-file=${service}${stage}.properties ${additionalParams} \
                   | oc create --filename -"
    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh "oc import-image ${service}:latest --from=${env.DOCKER_REGISTRY}/${USERNAME}/mega-zep-backend:${params.version}"
    }
}

def readServiceProperties(String service, String path = ".", String stage = "") {
    if (stage != "") {
        stage = "." + stage
    }
    def props = readProperties file: "${path}/${service}${stage}.properties"
    return props
}

